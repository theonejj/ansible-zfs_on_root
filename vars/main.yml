---
# This configuration is designed to Ubuntu 22.04, it is not backward compatible to older versions.

####### Nothing Below Here Needs to be Edited ############

# Ubuntu Release name
distro_release: "bookworm"
distro_name: "debian"
ubuntu_version: "22.04"

# Define Partition Mapping
boot_partition: "1"
swap_partition: "2"
root_partition: "3"

# Define EFI System Partition (ESP) Size in MB
boot_partition_size_mb: "512"

uefi_partition_flags: "-a1 -n{{ boot_partition }}:1M:+{{ boot_partition_size_mb }}M -A{{ boot_partition }}:set:2 -t{{ boot_partition }}:EF00"
# uefi_partition_flags: "-n{{ boot_partition }}:1M:+{{ boot_partition_size_mb }}M -t{{ boot_partition }}:EF00"

# Possible SWAP Partition Flags based on one device or more
single_disk_or_mirror_swap_flags: "-n{{ swap_partition }}:0:+{{ single_or_mirror_swap_partition_size_mb }}M -t{{ swap_partition }}:8200"
raidz_multi_disk_swap_flags: "-n{{ swap_partition }}:0:+{{ raidz_swap_partition_size_mb }}M -t{{ swap_partition }}:FD00"

# Define Root Pool Partition Flags - for Unencrypted or ZFS native Encryption
root_partition_flags: "-n{{ root_partition }}:0:{{ root_partition_size }} -t{{ root_partition }}:BF00"

# Define Pool Partition Suffixes
root_partition_name_suffix: "-part{{ root_partition }}"

# Enable native ZFS root pool encryption (default false) - This will be set to true when a passphrase
# is specified as an extra variable.
root_pool_encryption: false

# Set the boot and root pool type based on number of devices given ("", "mirror", "raidz", etc.)
root_pool_type: "{{ set_root_pool_type[(disk_by_id | length)] | default(set_root_pool_type['default']) }}"

# Define Root Pool Options
root_pool_options:
  - "-o ashift={{ zfs_rpool_ashift }}"
  - "-o autotrim=on"
  - "-O acltype=posixacl"
  - "-O canmount=off"
  - "-O compression={{ zfs_compression }}"
  - "-O atime=off"
  - "-O dnodesize=auto"
  - "-O normalization=formD"
  - "-O relatime=on"
  - "-O xattr=sa"
  - "-O mountpoint=/ -R {{ live_cd_mountpoint }} {{ root_pool_name }}"

# Define Root Pool Encryption Options
root_pool_encryption_options:
  - "-o encryption=aes-256-gcm"
  - "-o keylocation=prompt"
  - "-o keyformat=passphrase"

# Define rpool zpool create parameters list
root_pool_create_params:
  "{{ root_pool_options | join(' ') }} {{ root_pool_type }} {{ disk_by_id | join(root_partition_name_suffix + ' ') + root_partition_name_suffix + ' ' }}"

root_pool_container_options:
  - "-o canmount=off"
  - "-o mountpoint=none"
  - "{{ ' ' + (root_pool_encryption | default(false)) | ternary(root_pool_encryption_options | join(' '), '') }}"
  - "{{ root_pool_name }}/ROOT"

root_pool_dataset_path: "{{ root_pool_name }}/ROOT/{{ distro_name }}"
root_dataset_options:
  - "-o mountpoint=/"
  - "-o canmount=noauto"

root_pool_home_dataset_path: "{{ root_pool_name }}/HOME"

# Define Additional Datasets to Create
datasets_to_create:
  # Home Directory Dataset will be kept outside of OS Dataset
  - "-o canmount=on -o mountpoint=/home -o compression={{ zfs_compression }} -o atime=off {{ root_pool_home_dataset_path }}"
  - "-o canmount=on -o mountpoint=/root {{ root_pool_home_dataset_path }}/root"

###############################################################################
# [ Variable below are unrelated to ZFS ]######################################

# Define mount location within LIVE CD
live_cd_mountpoint: "/mnt"

# Define chroot command to use
chroot_cmd: "chroot {{ live_cd_mountpoint }}"

# EFI Boot Mountpoint
efi_boot_mountpoint: "/boot/efi"

# Path for EFI directory
efi_boot_path: "{{ efi_boot_mountpoint }}/EFI"

# Path for ZFSBootMenu
zfs_boot_menu_path: "{{ efi_boot_path }}/zfsbootmenu"

# Path for rEFInd
refind_path: "{{ efi_boot_path }}/refind"

# efi pathname for rEFInd within startup.nsh file (reversed slashes expected)
refind_efi_pathname: 'EFI\refind\refind_x64.efi'

# Path for syslinx BIOS bootloader
syslinx_path: "{{ efi_boot_mountpoint }}/syslinux"

# OS Prober is only needed on dual-boot configurations.
remove_os_prober: true

# Packages required to be held (not installed or updated) that conflict with
# Dract and or rEFInd Packages
packages_to_mark_hold:
  - "zfs-initramfs"
  - "initramfs-tools"
  - "grub-efi-amd64"
  - "grub-efi-amd64-signed"
  - "grub-efi-amd64-bin"
  - "grub-common"
  - "grub2-common"
  - "lilo"

# Directory to check that UEFI firmware is available
# This is required to be found if UEFI support is enabled
efi_firmware_path: "/sys/firmware/efi"

# Location of sudoers include file which contains: ansible ALL=(ALL) NOPASSWD:ALL
sudoers_include_file: "/etc/sudoers.d/99_sudo_include_file"

# Name of SSH Installation Helper Script (to remove if found)
ssh_installation_helper_script: "do_ssh.sh"

# Comma Separated Device Number to include as possible "disk" devices
# 8=[SATA, SCSI], 179=[MMC], 259=[NVMe]
lsblk_device_types: "8,179,259"

# "lsblk -ndo name,mountpoint --include {{lsblk_device_types}} | grep -v '/' | cat"
# The RO indicates if device is read-only (value 1), the awk filters to value 0 - not read-only
lsblk_device_command: "lsblk -ndo name,mountpoint,ro --include {{ lsblk_device_types }} | awk '/0$/{print $1}'"

# This version shows a little more information during manual install selection
lsblk_device_detail_command: "lsblk -ndo name,size,mountpoint,ro --include {{ lsblk_device_types }} | awk '/0$/{printf \"%-8s %8s\\n\", $1,$2}'"
